Exercitiu: 

Sa se creeze un pachet numit manager_bursa care sa contina:
a) O procedura care modifica bursa cu 25% pentru fiecare student care are bursa,
pana cand cea mai mare bursa devine mai mare de 3500 lei, moment in care nu se mai face update. 
Pentru studentii care nu au bursa, le adaugam 10% din valoarea cele mai mari burse gasite.

b)O functie care primeste ca parametru id-ul unui student si care ne spune daca acest student
se afla in top 10 al celor mai mari burse sau nu. 
Puteti sa va alegeti voi ce sa returnati in cazul asta.

c)O procedura de afisare a informatiilor despre un 
anumit student: numele, prenumele, bursa, an, grupa, etc. si daca este este in top zece burse sau daca nu este

Apelati dintr-un bloc anonim, pe rand, procedura de modificare bursa si afisare informatii student..

PS: testati ceea ce obtineti cu ceea ce aveti in baza de date, daca studentul vostru chiar se afla in top 10 conform burselor desc. Daca nu se obtine rezultat valid la verificarea de catre mine optineti punctaj partial indiferent de complexitatea rezolvarii.


CREATE OR REPLACE PACKAGE manager_bursa IS
  PROCEDURE modifica_bursa; 
  FUNCTION is_top10(v_id studenti.id%type) RETURN BOOLEAN;
  PROCEDURE info(v_id studenti.id%type);  
END manager_bursa;
/

CREATE OR REPLACE PACKAGE BODY manager_bursa IS

  PROCEDURE modifica_bursa AS
  CURSOR lista_studenti_bursieri IS SELECT nr_matricol FROM studenti WHERE bursa IS NOT NULL ORDER BY bursa DESC;
  CURSOR lista_studenti_fara_bursa IS SELECT nr_matricol FROM studenti WHERE bursa IS NULL;
    v_max_bursa NUMBER;
  BEGIN
    SELECT MAX(bursa) INTO v_max_bursa FROM studenti;
    FOR rec IN lista_studenti_fara_bursa LOOP
        UPDATE studenti SET bursa = v_max_bursa * 0.1 WHERE nr_matricol = rec.nr_matricol;
    END LOOP;
    WHILE v_max_bursa <= 3500 LOOP
      FOR rec IN lista_studenti_bursieri LOOP
        UPDATE studenti SET bursa = bursa * 1.25 WHERE nr_matricol = rec.nr_matricol;
      END LOOP;
      SELECT MAX(bursa) INTO v_max_bursa FROM studenti;
    END LOOP;
  END;


  FUNCTION is_top10(v_id studenti.id%type) RETURN BOOLEAN AS
  CURSOR top10 
  IS SELECT id FROM (SELECT id FROM studenti ORDER BY bursa DESC) WHERE rownum <= 10; 
    v_result BOOLEAN := false;
  BEGIN
    FOR rec IN top10 LOOP
      IF v_id = rec.id THEN v_result := true; END IF;
    END LOOP;
    RETURN v_result;
  END;


  PROCEDURE info(v_id studenti.id%type) AS
  CURSOR information IS SELECT nume, prenume, an, grupa, bursa
  FROM studenti WHERE studenti.id = v_id;
    v_nume studenti.nume%type;
    v_prenume studenti.prenume%type;
    v_an studenti.an%type;
    v_grupa studenti.grupa%type;
    v_bursa studenti.bursa%type;
  BEGIN
    OPEN information;
    FETCH information INTO v_nume, v_prenume, v_an, v_grupa, v_bursa;
    DBMS_OUTPUT.PUT_LINE('Student cu id: ' || v_id );
    DBMS_OUTPUT.PUT_LINE('Nume: ' || v_nume || ' Prenume: ' || v_prenume || ' An: ' || v_an || ' Grupa: ' || v_grupa || ' Bursa: ' || v_bursa );
    IF (is_top10(v_id) = true) THEN
      DBMS_OUTPUT.PUT_LINE('este bursier top 10');
    ELSE
      DBMS_OUTPUT.PUT_LINE('nu este bursier top 10');
    END IF;
    CLOSE information;
  END;

END manager_bursa;



DECLARE
  v_id studenti.id%type := 279;
BEGIN
  manager_bursa.modifica_bursa();
  manager_bursa.info(v_id);
END;

--SELECT id,nume,prenume FROM studenti ORDER BY bursa DESC;

